CCS PCH C Compiler, Version 5.015, 5967               23-mar-18 08:41

               Filename:   C:\Users\VAIO\Documents\class_micro\CCS C Projects\entradas\entradas.lst

               ROM used:   80 bytes (0%)
                           Largest free fragment is 32688
               RAM used:   4 (0%) at main() level
                           7 (0%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   0004
.................... #include <entradas.h> 
.................... #include <18LF4550.h> 
.................... //////////// Standard Header file for the PIC18LF4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18LF4550 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(crystal=20000000) 
....................  
....................  
....................  
.................... #use fast_io(A)   //configuro el puerto A 
.................... #use fast_io(B)   //configuro el puerto B 
....................  
.................... void main() 
*
0004:  CLRF   FF8
0006:  BCF    FD0.7
0008:  MOVF   FC1,W
000A:  ANDLW  C0
000C:  IORLW  0F
000E:  MOVWF  FC1
0010:  MOVLW  07
0012:  MOVWF  FB4
.................... {//abre main 
....................  
....................    set_tris_a(255); //configuro puerto A como entrada 
0014:  MOVLW  FF
0016:  MOVWF  F92
....................    set_tris_b(0); //configuro puerto B como salida 
0018:  MOVLW  00
001A:  MOVWF  F93
....................     
....................    while(TRUE) 
....................    {//abre while 
....................       int8 boton1 = input(PIN_A0);// leo la entrada en el Pin 0 del puerto A 
....................       int8 boton2 = input(PIN_A1);// leo la entrada en el Pin 0 del puerto A 
....................       int8 boton3 = input(PIN_A2);// leo la entrada en el Pin 0 del puerto A 
....................        
....................       if(boton1 == 1){ //verifico si fue presionado el boton 
*
002E:  DECFSZ 05,W
0030:  BRA    0036
....................          output_high(PIN_B0); //pongo a 1 la salida del pin 0 del puerto B 
0032:  BSF    F8A.0
....................       } 
0034:  BRA    0038
....................       else{                   //de lo contrario 
....................          output_low(PIN_B0); // pongo en 0 la salida del pin 0 del puerto B 
0036:  BCF    F8A.0
....................       } 
....................        
....................       if(boton2 == 1){ //verifico si fue presionado el boton 
0038:  DECFSZ 06,W
003A:  BRA    0040
....................          output_high(PIN_B1); //pongo a 1 la salida del pin 0 del puerto B 
003C:  BSF    F8A.1
....................       } 
003E:  BRA    0042
....................       else{                   //de lo contrario 
....................          output_low(PIN_B1); // pongo en 0 la salida del pin 0 del puerto B 
0040:  BCF    F8A.1
....................       } 
....................        
....................       if(boton3 == 1){ //verifico si fue presionado el boton 
0042:  DECFSZ 07,W
0044:  BRA    004A
....................          output_high(PIN_B2); //pongo a 1 la salida del pin 0 del puerto B 
0046:  BSF    F8A.2
....................       } 
0048:  BRA    004C
....................       else{                   //de lo contrario 
....................          output_low(PIN_B2); // pongo en 0 la salida del pin 0 del puerto B 
004A:  BCF    F8A.2
....................       } 
004C:  BRA    001C
....................        
....................    }//cierra while 
....................  
.................... } 
004E:  SLEEP 

Configuration Fuses:
   Word  1: CC04   PLL5 CPUDIV1 NOUSBDIV HS FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

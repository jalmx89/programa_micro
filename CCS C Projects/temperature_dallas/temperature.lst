CCS PCH C Compiler, Version 5.015, 5967               01-abr-18 18:29

               Filename:   C:\Users\VAIO\Documents\class_micro\CCS C Projects\temperature_dallas\temperature.lst

               ROM used:   932 bytes (3%)
                           Largest free fragment is 31836
               RAM used:   9 (0%) at main() level
                           35 (2%) worst case
               Stack used: 3 locations
               Stack size: 31

*
0000:  GOTO   033A
.................... #include <temperature.h> 
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
*
00F6:  MOVLW  8E
00F8:  MOVWF  00
00FA:  MOVFF  13,01
00FE:  MOVFF  12,02
0102:  CLRF   03
0104:  BTFSS  13.7
0106:  BRA    0112
0108:  COMF   01,F
010A:  COMF   02,F
010C:  INCF   02,F
010E:  BNZ   0112
0110:  INCF   01,F
0112:  MOVF   01,F
0114:  BNZ   0128
0116:  MOVFF  02,01
011A:  CLRF   02
011C:  MOVLW  08
011E:  SUBWF  00,F
0120:  MOVF   01,F
0122:  BNZ   0128
0124:  CLRF   00
0126:  BRA    013C
0128:  BCF    FD8.0
012A:  BTFSC  01.7
012C:  BRA    0136
012E:  RLCF   02,F
0130:  RLCF   01,F
0132:  DECF   00,F
0134:  BRA    0128
0136:  BTFSC  13.7
0138:  BRA    013C
013A:  BCF    01.7
013C:  GOTO   02E4 (RETURN)
0140:  MOVF   16,W
0142:  BTFSC  FD8.2
0144:  BRA    0290
0146:  MOVWF  22
0148:  MOVF   1A,W
014A:  BTFSC  FD8.2
014C:  BRA    0290
014E:  SUBWF  22,F
0150:  BNC   015C
0152:  MOVLW  7F
0154:  ADDWF  22,F
0156:  BTFSC  FD8.0
0158:  BRA    0290
015A:  BRA    0168
015C:  MOVLW  81
015E:  SUBWF  22,F
0160:  BTFSS  FD8.0
0162:  BRA    0290
0164:  BTFSC  FD8.2
0166:  BRA    0290
0168:  MOVFF  22,00
016C:  CLRF   01
016E:  CLRF   02
0170:  CLRF   03
0172:  CLRF   21
0174:  MOVFF  17,20
0178:  BSF    20.7
017A:  MOVFF  18,1F
017E:  MOVFF  19,1E
0182:  MOVLW  19
0184:  MOVWF  22
0186:  MOVF   1D,W
0188:  SUBWF  1E,F
018A:  BC    01A6
018C:  MOVLW  01
018E:  SUBWF  1F,F
0190:  BC    01A6
0192:  SUBWF  20,F
0194:  BC    01A6
0196:  SUBWF  21,F
0198:  BC    01A6
019A:  INCF   21,F
019C:  INCF   20,F
019E:  INCF   1F,F
01A0:  MOVF   1D,W
01A2:  ADDWF  1E,F
01A4:  BRA    01F6
01A6:  MOVF   1C,W
01A8:  SUBWF  1F,F
01AA:  BC    01D0
01AC:  MOVLW  01
01AE:  SUBWF  20,F
01B0:  BC    01D0
01B2:  SUBWF  21,F
01B4:  BC    01D0
01B6:  INCF   21,F
01B8:  INCF   20,F
01BA:  MOVF   1C,W
01BC:  ADDWF  1F,F
01BE:  MOVF   1D,W
01C0:  ADDWF  1E,F
01C2:  BNC   01F6
01C4:  INCF   1F,F
01C6:  BNZ   01F6
01C8:  INCF   20,F
01CA:  BNZ   01F6
01CC:  INCF   21,F
01CE:  BRA    01F6
01D0:  MOVF   1B,W
01D2:  IORLW  80
01D4:  SUBWF  20,F
01D6:  BC    01F4
01D8:  MOVLW  01
01DA:  SUBWF  21,F
01DC:  BC    01F4
01DE:  INCF   21,F
01E0:  MOVF   1B,W
01E2:  IORLW  80
01E4:  ADDWF  20,F
01E6:  MOVF   1C,W
01E8:  ADDWF  1F,F
01EA:  BNC   01BE
01EC:  INCF   20,F
01EE:  BNZ   01BE
01F0:  INCF   21,F
01F2:  BRA    01BE
01F4:  BSF    03.0
01F6:  DECFSZ 22,F
01F8:  BRA    01FC
01FA:  BRA    0212
01FC:  BCF    FD8.0
01FE:  RLCF   1E,F
0200:  RLCF   1F,F
0202:  RLCF   20,F
0204:  RLCF   21,F
0206:  BCF    FD8.0
0208:  RLCF   03,F
020A:  RLCF   02,F
020C:  RLCF   01,F
020E:  RLCF   23,F
0210:  BRA    0186
0212:  BTFSS  23.0
0214:  BRA    0222
0216:  BCF    FD8.0
0218:  RRCF   01,F
021A:  RRCF   02,F
021C:  RRCF   03,F
021E:  RRCF   23,F
0220:  BRA    0226
0222:  DECF   00,F
0224:  BZ    0290
0226:  BTFSC  23.7
0228:  BRA    0266
022A:  BCF    FD8.0
022C:  RLCF   1E,F
022E:  RLCF   1F,F
0230:  RLCF   20,F
0232:  RLCF   21,F
0234:  MOVF   1D,W
0236:  SUBWF  1E,F
0238:  BC    0248
023A:  MOVLW  01
023C:  SUBWF  1F,F
023E:  BC    0248
0240:  SUBWF  20,F
0242:  BC    0248
0244:  SUBWF  21,F
0246:  BNC   027C
0248:  MOVF   1C,W
024A:  SUBWF  1F,F
024C:  BC    0258
024E:  MOVLW  01
0250:  SUBWF  20,F
0252:  BC    0258
0254:  SUBWF  21,F
0256:  BNC   027C
0258:  MOVF   1B,W
025A:  IORLW  80
025C:  SUBWF  20,F
025E:  BC    0266
0260:  MOVLW  01
0262:  SUBWF  21,F
0264:  BNC   027C
0266:  INCF   03,F
0268:  BNZ   027C
026A:  INCF   02,F
026C:  BNZ   027C
026E:  INCF   01,F
0270:  BNZ   027C
0272:  INCF   00,F
0274:  BZ    0290
0276:  RRCF   01,F
0278:  RRCF   02,F
027A:  RRCF   03,F
027C:  MOVFF  17,22
0280:  MOVF   1B,W
0282:  XORWF  22,F
0284:  BTFSS  22.7
0286:  BRA    028C
0288:  BSF    01.7
028A:  BRA    0298
028C:  BCF    01.7
028E:  BRA    0298
0290:  CLRF   00
0292:  CLRF   01
0294:  CLRF   02
0296:  CLRF   03
0298:  GOTO   0310 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(crystal=20000000) 
*
0004:  CLRF   FEA
0006:  MOVLW  12
0008:  MOVWF  FE9
000A:  MOVF   FEF,W
000C:  BZ    0028
000E:  MOVLW  06
0010:  MOVWF  01
0012:  CLRF   00
0014:  DECFSZ 00,F
0016:  BRA    0014
0018:  DECFSZ 01,F
001A:  BRA    0012
001C:  MOVLW  7B
001E:  MOVWF  00
0020:  DECFSZ 00,F
0022:  BRA    0020
0024:  DECFSZ FEF,F
0026:  BRA    000E
0028:  RETURN 0
002A:  MOVLW  03
002C:  SUBWF  13,F
002E:  BNC   0042
0030:  CLRF   FEA
0032:  MOVLW  13
0034:  MOVWF  FE9
0036:  MOVF   FEF,W
0038:  BZ    0042
003A:  BRA    003E
003C:  BRA    003E
003E:  DECFSZ FEF,F
0040:  BRA    003C
0042:  RETURN 0
....................  
....................  
.................... #include "libs/1wire.c" 
.................... #ifndef ONE_WIRE_C 
.................... #define ONE_WIRE_C 
....................  
.................... /* 
....................  * One wire (1-wire) driver for CCS C compiler. Suitable for use with devices 
....................  * such as the DS18B20 1-wire digital temperature sensor. 
....................  */ 
....................  
.................... #define ONE_WIRE_PIN PIN_C5 
....................  
.................... /* 
....................  * onewire_reset() 
....................  * Description: Initiates the one wire bus. 
....................  */ 
.................... // OK if just using a single permanently connected device 
.................... void onewire_reset() { 
....................     output_low(ONE_WIRE_PIN);       // pull the bus low for reset 
0044:  BCF    F94.5
0046:  BCF    F8B.5
....................     delay_us(500); 
0048:  MOVLW  02
004A:  MOVWF  12
004C:  MOVLW  F9
004E:  MOVWF  13
0050:  RCALL  002A
0052:  DECFSZ 12,F
0054:  BRA    004C
....................     output_float(ONE_WIRE_PIN);     // float the bus high 
0056:  BSF    F94.5
....................     delay_us(500);                  // wait-out remaining initialisation window 
0058:  MOVLW  02
005A:  MOVWF  12
005C:  MOVLW  F9
005E:  MOVWF  13
0060:  RCALL  002A
0062:  DECFSZ 12,F
0064:  BRA    005C
....................     output_float(ONE_WIRE_PIN); 
0066:  BSF    F94.5
0068:  RETURN 0
.................... } 
....................  
....................  
.................... /* 
....................  * onewire_write(int8 data) 
....................  * Arguments: a byte of data. 
....................  * Description: writes a byte of data to the device. 
....................  */ 
.................... void onewire_write(int8 data) { 
....................     int8 count; 
....................  
....................     for(count = 0; count < 8; ++count) { 
006A:  CLRF   13
006C:  MOVF   13,W
006E:  SUBLW  07
0070:  BNC   00AC
....................         output_low(ONE_WIRE_PIN); 
0072:  BCF    F94.5
0074:  BCF    F8B.5
....................         delay_us(2);                // pull 1-wire low to initiate write time-slot. 
0076:  MOVLW  02
0078:  MOVWF  00
007A:  DECFSZ 00,F
007C:  BRA    007A
007E:  BRA    0080
0080:  NOP   
....................         output_bit(ONE_WIRE_PIN, shift_right(&data, 1, 0)); // set output bit on 1-wire 
0082:  BCF    FD8.0
0084:  RRCF   12,F
0086:  BC    008C
0088:  BCF    F8B.5
008A:  BRA    008E
008C:  BSF    F8B.5
008E:  BCF    F94.5
....................         delay_us(60);               // wait until end of write slot. 
0090:  MOVLW  63
0092:  MOVWF  00
0094:  DECFSZ 00,F
0096:  BRA    0094
0098:  BRA    009A
....................         output_float(ONE_WIRE_PIN); // set 1-wire high again, 
009A:  BSF    F94.5
....................         delay_us(2);                // for more than 1us minimum. 
009C:  MOVLW  02
009E:  MOVWF  00
00A0:  DECFSZ 00,F
00A2:  BRA    00A0
00A4:  BRA    00A6
00A6:  NOP   
00A8:  INCF   13,F
00AA:  BRA    006C
....................     } 
00AC:  RETURN 0
.................... } 
....................  
.................... /* 
....................  * onewire_read() 
....................  * Description: reads and returns a byte of data from the device. 
....................  */ 
.................... int onewire_read() { 
....................     int count, data; 
....................  
....................     for(count = 0; count < 8; ++count) { 
00AE:  CLRF   12
00B0:  MOVF   12,W
00B2:  SUBLW  07
00B4:  BNC   00F0
....................         output_low(ONE_WIRE_PIN); 
00B6:  BCF    F94.5
00B8:  BCF    F8B.5
....................         delay_us(2);                // pull 1-wire low to initiate read time-slot. 
00BA:  MOVLW  02
00BC:  MOVWF  00
00BE:  DECFSZ 00,F
00C0:  BRA    00BE
00C2:  BRA    00C4
00C4:  NOP   
....................         output_float(ONE_WIRE_PIN); // now let 1-wire float high, 
00C6:  BSF    F94.5
....................         delay_us(8);                // let device state stabilise, 
00C8:  MOVLW  0C
00CA:  MOVWF  00
00CC:  DECFSZ 00,F
00CE:  BRA    00CC
00D0:  BRA    00D2
00D2:  NOP   
....................         shift_right(&data, 1, input(ONE_WIRE_PIN)); // and load result. 
00D4:  BSF    F94.5
00D6:  BTFSC  F82.5
00D8:  BRA    00DE
00DA:  BCF    FD8.0
00DC:  BRA    00E0
00DE:  BSF    FD8.0
00E0:  RRCF   13,F
....................         delay_us(120);              // wait until end of read slot. 
00E2:  MOVLW  C7
00E4:  MOVWF  00
00E6:  DECFSZ 00,F
00E8:  BRA    00E6
00EA:  BRA    00EC
00EC:  INCF   12,F
00EE:  BRA    00B0
....................     } 
....................     return data; 
00F0:  MOVFF  13,01
00F4:  RETURN 0
.................... }  
....................  
.................... #endif /*ONE_WIRE_C*/ 
....................  
.................... #include "libs/ds1820.c" 
.................... #ifndef DS1820_C 
.................... #define DS1820_C 
....................  
.................... #include "1wire.c" 
.................... #ifndef ONE_WIRE_C 
.................... #define ONE_WIRE_C 
....................  
.................... /* 
....................  * One wire (1-wire) driver for CCS C compiler. Suitable for use with devices 
....................  * such as the DS18B20 1-wire digital temperature sensor. 
....................  */ 
....................  
.................... #define ONE_WIRE_PIN PIN_C5 
....................  
.................... /* 
....................  * onewire_reset() 
....................  * Description: Initiates the one wire bus. 
....................  */ 
.................... // OK if just using a single permanently connected device 
.................... void onewire_reset() { 
....................     output_low(ONE_WIRE_PIN);       // pull the bus low for reset 
....................     delay_us(500); 
....................     output_float(ONE_WIRE_PIN);     // float the bus high 
....................     delay_us(500);                  // wait-out remaining initialisation window 
....................     output_float(ONE_WIRE_PIN); 
.................... } 
....................  
....................  
.................... /* 
....................  * onewire_write(int8 data) 
....................  * Arguments: a byte of data. 
....................  * Description: writes a byte of data to the device. 
....................  */ 
.................... void onewire_write(int8 data) { 
....................     int8 count; 
....................  
....................     for(count = 0; count < 8; ++count) { 
....................         output_low(ONE_WIRE_PIN); 
....................         delay_us(2);                // pull 1-wire low to initiate write time-slot. 
....................         output_bit(ONE_WIRE_PIN, shift_right(&data, 1, 0)); // set output bit on 1-wire 
....................         delay_us(60);               // wait until end of write slot. 
....................         output_float(ONE_WIRE_PIN); // set 1-wire high again, 
....................         delay_us(2);                // for more than 1us minimum. 
....................     } 
.................... } 
....................  
.................... /* 
....................  * onewire_read() 
....................  * Description: reads and returns a byte of data from the device. 
....................  */ 
.................... int onewire_read() { 
....................     int count, data; 
....................  
....................     for(count = 0; count < 8; ++count) { 
....................         output_low(ONE_WIRE_PIN); 
....................         delay_us(2);                // pull 1-wire low to initiate read time-slot. 
....................         output_float(ONE_WIRE_PIN); // now let 1-wire float high, 
....................         delay_us(8);                // let device state stabilise, 
....................         shift_right(&data, 1, input(ONE_WIRE_PIN)); // and load result. 
....................         delay_us(120);              // wait until end of read slot. 
....................     } 
....................     return data; 
.................... }  
....................  
.................... #endif /*ONE_WIRE_C*/ 
....................  
....................  
.................... float ds1820_read(); 
.................... void ds1820_configure(int8 TH, int8 TL, int8 config); 
....................  
.................... /* 
....................  * ds1820_read() 
....................  * Description: reads the ds18x20 device on the 1-wire bus and returns 
....................  *              the temperature 
....................  */ 
....................   
.................... float ds1820_read() { 
*
029C:  CLRF   09
....................     int8 busy=0, temp1, temp2; 
....................     signed int16 temp3; 
....................     float result; 
....................      
....................     //ds1820_configure(0x00, 0x00, 0x00);     //9 bit resolution 
....................  
....................     onewire_reset(); 
029E:  RCALL  0044
....................     onewire_write(0xCC);            //Skip ROM, address all devices 
02A0:  MOVLW  CC
02A2:  MOVWF  12
02A4:  RCALL  006A
....................     onewire_write(0x44);            //Start temperature conversion 
02A6:  MOVLW  44
02A8:  MOVWF  12
02AA:  RCALL  006A
....................  
....................     while(busy == 0)                //Wait while busy (bus is low) 
02AC:  MOVF   09,F
02AE:  BNZ   02B8
....................         busy = onewire_read(); 
02B0:  RCALL  00AE
02B2:  MOVFF  01,09
02B6:  BRA    02AC
....................  
....................     onewire_reset(); 
02B8:  RCALL  0044
....................     onewire_write(0xCC);            //Skip ROM, address all devices 
02BA:  MOVLW  CC
02BC:  MOVWF  12
02BE:  RCALL  006A
....................     onewire_write(0xBE);            //Read scratchpad 
02C0:  MOVLW  BE
02C2:  MOVWF  12
02C4:  RCALL  006A
....................     temp1 = onewire_read(); 
02C6:  RCALL  00AE
02C8:  MOVFF  01,0A
....................     temp2 = onewire_read(); 
02CC:  RCALL  00AE
02CE:  MOVFF  01,0B
....................     temp3 = make16(temp2, temp1); 
02D2:  MOVFF  0B,0D
02D6:  MOVFF  0A,0C
....................   
....................     //result = (float) temp3 / 2.0;   //Calculation for DS18S20 with 0.5 deg C resolution 
....................     result = (float) temp3 / 16.0;    //Calculation for DS18B20 
02DA:  MOVFF  0D,13
02DE:  MOVFF  0C,12
02E2:  BRA    00F6
02E4:  MOVFF  03,15
02E8:  MOVFF  02,14
02EC:  MOVFF  01,13
02F0:  MOVFF  00,12
02F4:  MOVFF  03,19
02F8:  MOVFF  02,18
02FC:  MOVFF  01,17
0300:  MOVFF  00,16
0304:  CLRF   1D
0306:  CLRF   1C
0308:  CLRF   1B
030A:  MOVLW  83
030C:  MOVWF  1A
030E:  BRA    0140
0310:  MOVFF  03,11
0314:  MOVFF  02,10
0318:  MOVFF  01,0F
031C:  MOVFF  00,0E
....................   
....................     delay_ms(200); 
0320:  MOVLW  C8
0322:  MOVWF  12
0324:  RCALL  0004
....................     return(result); 
0326:  MOVFF  0E,00
032A:  MOVFF  0F,01
032E:  MOVFF  10,02
0332:  MOVFF  11,03
0336:  GOTO   0390 (RETURN)
.................... } 
....................  
.................... /* 
....................  * ds1820_configure(int8 TH, int8 LH, int8 config) 
....................  * Description: writes configuration data to the DS18x20 device 
....................  * Arguments: alarm trigger high, alarm trigger low, configuration 
....................  */ 
....................  
.................... void ds1820_configure(int8 TH, int8 TL, int8 config) { 
....................     onewire_reset(); 
....................     onewire_write(0xCC);            //Skip ROM, address all devices 
....................     onewire_write(0x4E);            //Write to scratchpad 
....................     onewire_write(TH); 
....................     onewire_write(TL); 
....................     onewire_write(config); 
.................... } 
....................  
.................... #endif /*DS1820_C*/ 
....................  
.................... //#use rs232(baud=9600, parity=N, UART1, bits=8, stop=1) 
....................  
.................... void main() 
033A:  CLRF   FF8
033C:  BCF    FD0.7
033E:  MOVF   FC1,W
0340:  ANDLW  C0
0342:  IORLW  0F
0344:  MOVWF  FC1
0346:  MOVLW  07
0348:  MOVWF  FB4
034A:  CLRF   08
034C:  CLRF   07
034E:  CLRF   06
0350:  CLRF   05
.................... { 
....................  
....................    float value = 0.0; 
....................  
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
0352:  MOVF   FC1,W
0354:  ANDLW  C0
0356:  IORLW  0F
0358:  MOVWF  FC1
....................    setup_adc(ADC_OFF); 
035A:  BCF    FC2.0
....................    setup_spi(SPI_SS_DISABLED); 
035C:  BCF    FC6.5
035E:  BCF    F94.7
0360:  BSF    F93.0
0362:  BCF    F93.1
0364:  MOVLW  01
0366:  MOVWF  FC6
0368:  MOVLW  00
036A:  MOVWF  FC7
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
036C:  MOVLW  88
036E:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
0370:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1);     
0372:  MOVLW  00
0374:  MOVWF  FCA
0376:  MOVLW  00
0378:  MOVWF  FCB
....................    setup_oscillator(OSC_8MHZ); 
037A:  MOVLW  70
037C:  MOVWF  FD3
037E:  MOVF   FD3,W
....................    //setup_uart(9600); 
....................     
....................    delay_ms(1000); 
0380:  MOVLW  04
0382:  MOVWF  09
0384:  MOVLW  FA
0386:  MOVWF  12
0388:  RCALL  0004
038A:  DECFSZ 09,F
038C:  BRA    0384
....................     
....................    //printf("Starting...\t\n"); 
....................     
....................    while(TRUE) {         
....................       value = ds1820_read(); 
038E:  BRA    029C
0390:  MOVFF  03,08
0394:  MOVFF  02,07
0398:  MOVFF  01,06
039C:  MOVFF  00,05
03A0:  BRA    038E
....................     //  printf("%f\t\n", value);         
....................    } 
....................     
.................... } 
03A2:  SLEEP 

Configuration Fuses:
   Word  1: CC04   PLL5 CPUDIV1 NOUSBDIV HS FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

CCS PCH C Compiler, Version 5.015, 5967               04-abr-18 05:31

               Filename:   C:\Users\VAIO\Desktop\class_micro\CCS C Projects\ADC_use\adc_converter.lst

               ROM used:   134 bytes (0%)
                           Largest free fragment is 32634
               RAM used:   6 (0%) at main() level
                           7 (0%) worst case
               Stack used: 1 locations
               Stack size: 31

*
0000:  GOTO   002A
.................... #include <adc_converter.h> 
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(crystal=20000000) 
0004:  CLRF   FEA
0006:  MOVLW  07
0008:  MOVWF  FE9
000A:  MOVF   FEF,W
000C:  BZ    0028
000E:  MOVLW  06
0010:  MOVWF  01
0012:  CLRF   00
0014:  DECFSZ 00,F
0016:  BRA    0014
0018:  DECFSZ 01,F
001A:  BRA    0012
001C:  MOVLW  7B
001E:  MOVWF  00
0020:  DECFSZ 00,F
0022:  BRA    0020
0024:  DECFSZ FEF,F
0026:  BRA    000E
0028:  RETURN 0
....................  
....................  
....................  
.................... #use fast_io(D) 
....................  
.................... void main(){ 
002A:  CLRF   FF8
002C:  BCF    FD0.7
002E:  MOVF   FC1,W
0030:  ANDLW  C0
0032:  IORLW  0F
0034:  MOVWF  FC1
0036:  MOVLW  07
0038:  MOVWF  FB4
003A:  CLRF   06
003C:  CLRF   05
....................    unsigned int16 valor = 0; 
....................        
....................    set_tris_d(0); //configuro el puerto D como salida 
003E:  MOVLW  00
0040:  MOVWF  F95
....................    output_d(0);   //pongo a 0 todas las salidas del puerto D 
0042:  CLRF   F8C
....................     
....................    setup_adc(ADC_CLOCK_INTERNAL); //configuramos el reloj para el ADC, le decimos que será el relojo interno 
0044:  MOVF   FC0,W
0046:  ANDLW  C0
0048:  IORLW  07
004A:  MOVWF  FC0
004C:  BSF    FC0.7
004E:  BSF    FC2.0
....................    setup_adc_ports(AN0); //elegimos el puerto del cual vamos a usar el ADC, en este caso el PORTA => AN0, por que solo se usará uno 
0050:  MOVF   FC1,W
0052:  ANDLW  C0
0054:  IORLW  0E
0056:  MOVWF  FC1
....................     
....................    set_adc_channel(0); //decimos que vamos a leer el canal 0, 
0058:  MOVLW  00
005A:  MOVWF  01
005C:  MOVF   FC2,W
005E:  ANDLW  C3
0060:  IORWF  01,W
0062:  MOVWF  FC2
....................    delay_ms(10);        //el tiempo que viene marcado en el datasshet para esperar la configuración interna 
0064:  MOVLW  0A
0066:  MOVWF  07
0068:  RCALL  0004
....................    
....................     
....................    while(TRUE){ 
....................       valor = read_adc(); //leemos el canal que acabamos de configurar 
006A:  BSF    FC2.1
006C:  BTFSC  FC2.1
006E:  BRA    006C
0070:  MOVFF  FC3,05
0074:  MOVFF  FC4,06
....................       output_d(valor); 
0078:  MOVFF  05,F8C
....................       delay_ms(10); 
007C:  MOVLW  0A
007E:  MOVWF  07
0080:  RCALL  0004
0082:  BRA    006A
....................    } 
....................  
.................... } 
0084:  SLEEP 

Configuration Fuses:
   Word  1: CC04   PLL5 CPUDIV1 NOUSBDIV HS FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

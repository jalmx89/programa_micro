CCS PCH C Compiler, Version 5.015, 5967               24-abr-18 13:15

               Filename:   C:\Users\VAIO\Desktop\class_micro\CCS C Projects\motor_pap\motor_pap.lst

               ROM used:   356 bytes (1%)
                           Largest free fragment is 32412
               RAM used:   5 (0%) at main() level
                           10 (0%) worst case
               Stack used: 1 locations
               Stack size: 31

*
0000:  GOTO   007E
.................... #include <motor_pap.h> 
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 01,02
0016:  DATA 04,08
0018:  CLRF   FF7
001A:  ADDLW  28
001C:  MOVWF  FF6
001E:  MOVLW  00
0020:  ADDWFC FF7,F
0022:  TBLRD*+
0024:  MOVF   FF5,W
0026:  RETURN 0
0028:  DATA 08,04
002A:  DATA 02,01
002C:  CLRF   FF7
002E:  ADDLW  3C
0030:  MOVWF  FF6
0032:  MOVLW  00
0034:  ADDWFC FF7,F
0036:  TBLRD*+
0038:  MOVF   FF5,W
003A:  RETURN 0
003C:  DATA 03,06
003E:  DATA 0A,09
0040:  CLRF   FF7
0042:  ADDLW  50
0044:  MOVWF  FF6
0046:  MOVLW  00
0048:  ADDWFC FF7,F
004A:  TBLRD*+
004C:  MOVF   FF5,W
004E:  RETURN 0
0050:  DATA 01,03
0052:  DATA 02,06
0054:  DATA 04,0C
0056:  DATA 08,09
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
....................  
.................... #use delay(crystal=20000000) 
0058:  CLRF   FEA
005A:  MOVLW  0A
005C:  MOVWF  FE9
005E:  MOVF   FEF,W
0060:  BZ    007C
0062:  MOVLW  06
0064:  MOVWF  01
0066:  CLRF   00
0068:  DECFSZ 00,F
006A:  BRA    0068
006C:  DECFSZ 01,F
006E:  BRA    0066
0070:  MOVLW  7B
0072:  MOVWF  00
0074:  DECFSZ 00,F
0076:  BRA    0074
0078:  DECFSZ FEF,F
007A:  BRA    0062
007C:  RETURN 0
....................  
....................  
....................  
.................... #use fast_io(D) 
.................... #use fast_io(B) 
....................  
.................... #define time 500 //variable defina para el tiempo de retardo 
.................... const byte backward[] = {0x01, 0x02, 0x04, 0x08 }; //secuencia para ir adelante 
.................... const byte forward[] = {0x08, 0x04, 0x02, 0x01 }; //secuencia para reversa 
.................... const byte full[] = {0x03, 0x06, 0x0A, 0x09 }; //secuencia para full, de 45 en 45° 
.................... const byte half[] = {0x01, 0x03, 0x02, 0x06, 0x04,0x0C, 0x08, 0x09}; //secuencia de medio paso 
....................  
.................... void main() 
007E:  CLRF   FF8
0080:  BCF    FD0.7
0082:  MOVF   FC1,W
0084:  ANDLW  C0
0086:  IORLW  0F
0088:  MOVWF  FC1
008A:  MOVLW  07
008C:  MOVWF  FB4
.................... { 
....................    set_tris_d(0); 
008E:  MOVLW  00
0090:  MOVWF  F95
....................    output_d(0); 
0092:  CLRF   F8C
....................     
....................    + 
....................    set_tris_b(0xff); 
0094:  MOVLW  FF
0096:  MOVWF  F93
....................    output_b(0); 
0098:  CLRF   F8A
....................     
....................    while(TRUE) 
....................    { 
....................       if(input_b() == 0x01){ 
009A:  DECFSZ F81,W
009C:  BRA    00CA
....................          for(int x=0; x <4; x++){ 
009E:  CLRF   05
00A0:  MOVF   05,W
00A2:  SUBLW  03
00A4:  BNC   00CA
....................              output_d(forward[x]); 
00A6:  CLRF   03
00A8:  MOVF   05,W
00AA:  MOVFF  FF2,09
00AE:  BCF    FF2.7
00B0:  RCALL  0018
00B2:  BTFSC  09.7
00B4:  BSF    FF2.7
00B6:  MOVWF  F8C
....................              delay_ms(time); 
00B8:  MOVLW  02
00BA:  MOVWF  09
00BC:  MOVLW  FA
00BE:  MOVWF  0A
00C0:  RCALL  0058
00C2:  DECFSZ 09,F
00C4:  BRA    00BC
00C6:  INCF   05,F
00C8:  BRA    00A0
....................         } 
....................       } 
....................        
....................       if(input_b() == 0x02){ 
00CA:  MOVF   F81,W
00CC:  SUBLW  02
00CE:  BNZ   00FC
....................          for(int x=0; x <4; x++){ 
00D0:  CLRF   06
00D2:  MOVF   06,W
00D4:  SUBLW  03
00D6:  BNC   00FC
....................              output_d(backward[x]); 
00D8:  CLRF   03
00DA:  MOVF   06,W
00DC:  MOVFF  FF2,09
00E0:  BCF    FF2.7
00E2:  RCALL  0004
00E4:  BTFSC  09.7
00E6:  BSF    FF2.7
00E8:  MOVWF  F8C
....................              delay_ms(time); 
00EA:  MOVLW  02
00EC:  MOVWF  09
00EE:  MOVLW  FA
00F0:  MOVWF  0A
00F2:  RCALL  0058
00F4:  DECFSZ 09,F
00F6:  BRA    00EE
00F8:  INCF   06,F
00FA:  BRA    00D2
....................         } 
....................       } 
....................        
....................       if(input_b() == 0x04){ 
00FC:  MOVF   F81,W
00FE:  SUBLW  04
0100:  BNZ   012E
....................          for(int x=0; x <8; x++){ 
0102:  CLRF   07
0104:  MOVF   07,W
0106:  SUBLW  07
0108:  BNC   012E
....................              output_d(half[x]); 
010A:  CLRF   03
010C:  MOVF   07,W
010E:  MOVFF  FF2,09
0112:  BCF    FF2.7
0114:  RCALL  0040
0116:  BTFSC  09.7
0118:  BSF    FF2.7
011A:  MOVWF  F8C
....................              delay_ms(time); 
011C:  MOVLW  02
011E:  MOVWF  09
0120:  MOVLW  FA
0122:  MOVWF  0A
0124:  RCALL  0058
0126:  DECFSZ 09,F
0128:  BRA    0120
012A:  INCF   07,F
012C:  BRA    0104
....................         } 
....................       } 
....................        
....................        if(input_b() == 0x08){ 
012E:  MOVF   F81,W
0130:  SUBLW  08
0132:  BNZ   0160
....................          for(int x=0; x <4; x++){ 
0134:  CLRF   08
0136:  MOVF   08,W
0138:  SUBLW  03
013A:  BNC   0160
....................              output_d(full[x]); 
013C:  CLRF   03
013E:  MOVF   08,W
0140:  MOVFF  FF2,09
0144:  BCF    FF2.7
0146:  RCALL  002C
0148:  BTFSC  09.7
014A:  BSF    FF2.7
014C:  MOVWF  F8C
....................              delay_ms(time); 
014E:  MOVLW  02
0150:  MOVWF  09
0152:  MOVLW  FA
0154:  MOVWF  0A
0156:  RCALL  0058
0158:  DECFSZ 09,F
015A:  BRA    0152
015C:  INCF   08,F
015E:  BRA    0136
....................         } 
....................       } 
0160:  BRA    009A
....................    } 
....................  
.................... } 
0162:  SLEEP 

Configuration Fuses:
   Word  1: CC04   PLL5 CPUDIV1 NOUSBDIV HS FCMEN IESO
   Word  2: 0E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT128
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
